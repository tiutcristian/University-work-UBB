==============================================

CREATE:
int shmget(key_t key, size_t size, int shmflg);	
	e.g. int shmid = shmget(1234, sizeof(struct absp), IPC_CREAT | 0600);

ATTACH:	
void *shmat(int shmid, const void *shmaddr, int shmflg);
	e.g. absp* x = shmat(shmid, 0, 0);
	
DETACH:
int shmdt(const void *shmaddr);
	e.g. shmdt(x);
	
DESTROY:
int shmctl(int shmid, IPC_RMID, struct shmid_ds *buf);
	e.g. shmctl(shmid, IPC_RMID, NULL);
	
==============================================

Identified by a number that is unique in the system (1234 in the example above).
See all existing IPCs using the command "ipcs".
Delete an IPC using command "ipcrm".

==============================================

Shared memory API
a. Create or get a handle to an existing shared memory segment: shmget
b. Attach - map the shared memory segment to a pointer in your process: shmat
c. Detach - unmap the shared memory segment from you pointer: shmdt
d. Control (configure, delete, etc.) the shared memory segment: shmctl

==============================================

Shared memory without synchronization mechanisms is guaranteed to cause trouble.
