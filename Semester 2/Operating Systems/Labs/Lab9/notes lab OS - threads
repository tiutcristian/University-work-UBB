==================== THREADS ====================

spre deosebire de procese (fiecare cu treaba lui)
toate threadurile -> in acelasi spatiu de memorie -> toate pot modifica/citi/etc.

thread in care ruleaza functia main = thread ul principal
restul -> secundare

sistemul de operare o sa ruleze un thread mai important mai des
!! nu face toate thread-urile f importante !! -> iese urat

windows	-> int -> 14ms
linux 	-> int -> 1ms

Threads in the same process share:
	- Process instructions
	- Most data
	- open files (descriptors)
	- signals and signal handlers
	- current working directory
	- User and group id
	
intrerupere de ceas ==> se salveaza toate cele de sus 
						+ pune valorile in procesor
						+ pune eip
						+ ret 
						
exista o zona de memorie numita "thread local storage"
vizibila tuturor thread urilor
accesibila doar thread ului care a creat o

Compiling programs that use POSIX threads
gcc -pthread -Wall source.c -o output
	^^^^^^^^
	+ #include <pthread.h>

Functii pt thread uri
	pthread_create	= pthread_create
		pthread_create(thread_identifier, attributes, thread_function, params_thred_function);
											^^^							^^^ -> adresa unde gaseste
											^^^									parametrii
											^^^ -> instructiuni cum sa creeze thread ul
											
	pthread_join	= join with a terminated thread
		pthread_join(thread_identifier, valoarea_returnata)
		
	pthread_exit	= echivalentul lui exit() de la procese
	pthread_self	= echivalentul lui getpid()
	
trebuie sa tinem minte identificatorii thread urilor
====================================================================================================



==================== MUTEXES ====================

!!! identificam zona minima de protejat !!!
protejam toate resursele globale
fie variabila, FIE FISIER

================================================================================
pthread_mutex_lock(&mutex);
    // the instructions in this area can be executed by a single thread at a time
    
    // add the sum computed by the thread to the global sum
    global_sum = global_sum + local_sum;
    	
pthread_mutex_unlock(&mutex);
================================================================================

!! Daca protejam aceeasi resursa globala, toate thread urile trebuie sa foloseasca acelasi mutex !!











































